PROJECT OUTLINE
===============

Location: "G:\CurrentActivity\PRJ Compiler Rewrite"
{
TODO: Shove *everything* into this directory
.sln files here are shortcuts to the ones I'm currently working on

"Compiler" directory contains the main project - the newly written stuff. This is in git.

"Old stuff" directory contains old duplicates
- Contains "dups_XXX" directories for dups of project XXX
- Each XXX contains old "z80asm, z80cc etc" directories arbitrarily renamed to 1,2,3,...

"z80asm - Merging 0.sln" points to "G:\CurrentActivity\PRJ Compiler restore\Merging z80asm\0\z80asm.sln"
}


Some years ago I read that every programmer should have written a compiler. Seemed like a good idea and I had some spare time.
Problem is: what platform? I don't want to go into all the detail of the x86/x64 platform, and I don't know it particularly well anyway.
Considered the Amiga but same problem.
Remembered that I know the 6502 and z80 fairly well. z80 is more powerful so decided on that.
What hardware though? Obviously not a Sinclair ZX*.  Decided on an emulator instead.

So this suite comprises a number of modules:
z80asm -- for writing assembly programs that will test the emulator
z80dis -- for disassembling programs that the compiler might have generated
z80link -- linker for the runtime library and any object files created by z80asm/z80cc
z80cc -- the C compiler for the z80 - the whole point of this project
z80emu -- an emulator based on an instruction interpreter; this won't be a T-state accurate
- emulator, it'll just take in each instruction and make the relevant changes in registers and memory.
- There will be memory mapped IO with all attached hardware emulated, so this will run as a Windows GUI program.
- Previously this just hit the WinAPI directly but in the rewrite I've decided to use wxWidgets.

Over the years I've taken various copies at different stages of development, no source code control, so now
I've got a mess of loads of different copies. Tried marking a directory as MASTER but this didn't work out.


INDEX
=====
z000 Decisions
z001 Task list
z002 Task details
z003 Bug list
z004 Reference material


~~~~~~
z000 Decisions
==============
{{
PRJ Compiler - WTF is going on!!!
Loads of duplicates?
And what's this PRJ Compiler restore? Seems to be merging loads more duplicates!
Want to upload to Git but need to get it in some sort of order first.
Code is basically C style with some classes thrown in.
Lots of magic numbers being thrown around all over the place.
Although it works, frankly it's a mess and I can do better.

--> Rewrite the whole thing

~
G:\CurrentActivity\PRJ Compiler\MASTER
- this should be the main one
Contents backed up to G:\CurrentActivity\MASTER 4-4-2020.7z

However we're doing the rewrite in G:\CurrentActivity\PRJ Compiler Rewrite
~
Let's get all strings into std::string as soon as possible.  <-- Does this solve the Spectre issue?
- Spectre: no, but converting argc and argv[] like this does: std::vector<std::string> args(argv, argv + argc);
~
Testing: Assembler doesn't need any. Some other projects might
~
Using wxWidgets for z80emu
~
we can simplify the parsing for numbers:
$xxx = hex: x in 0123456789abcdef
xxxx = decimal: x in 0123456789
anything else where a number is expected is a label

We're not going to support that batshit beefh notation for a hex number. It's $beef.
~
Wherever possible we should follow the return value convention 0==OK
(But should I think about throwing exceptions instead? -> Only if it makes the code easier to understand.)
~
Trying to decide what design patterns to use for z80asm, nothing is immediately obvious.
A couple of suggestions here https://stackoverflow.com/questions/5586747/design-pattern-for-making-an-assembler
point to lookup tables and avoiding if - else if ladders, one of which I've already started climbing so I'll head in that direction instead.

This refers to using regexes to parse computer languages:
https://en.wikipedia.org/wiki/Parsing#Parser

hey wtf!!!!!
this https://stackoverflow.com/questions/1822797/regex-writing-a-toy-compiler-parsing-comment-remover
talks about using a DFA table. Well isn't that more or less what I had before? OK it wasn't a table, it was in code, - ah no, it was effectively an if/else/strcmp ladder
~
~
~
~
~
}}

Q&A

Q: Rewrite in VC++2019?
A: Yes

Q: Automated testing?
A: No. There isn't a lot of interplay with this. Lots of little transformations into little results that each either work or don't. The emulator might warrant it.

Q: z80asm: Is asm a good place to start?
A: Don't see why not.

Q: z80asm: Console or GUI?  GUI would be nicer.
A: Console.  This is only a utility to support the compiler. I don't want to write a fully featured Z80 asm IDE.
So this will be a command line utility to take a .asm file and produce... whatever it produced before. Was it executable or object?

Q: z80asm: Was the output executable or object?
A: Text-based object files, structure: [address { [byte|XX]* }]* symbol-table

Q: z80asm: might be nice to look at VSCode integration
A: Err, no.

Q: Solution: when do we first check in to Git?  When z80asm is complete?
A: No, z80asm started, all other projects stubbed, z80emu created as a minimal wxWidgets. Check-in to git and upload to GitHub



z001 Task list
==============
T000 Plan
T001 Eliminate duplicates - sidetracked onto T002
T002 Start VS2019 solution
T003 Get z80asm to the point where it can generate some simple files       <--- WIP
T004 z80link to convert just one .z8o into .z8x, no symbol table, no memory mapped IO (emu will start with some preconfigured hardware which can then later be customised)
T005 z80emu to run the output


z002 Task details
=================
T001 Eliminate duplicates - sidetracked onto T002
-------------------------
{{
So basically duplicates will be eliminated by rewriting each project, using the old duplicates for inspiration and refactoring throughout.

G:\CurrentActivity\PRJ Compiler restore\MASTER
- hmm, what's this?

Seems to be another merging of duplicates.

I think what I've got here is:
G:\CurrentActivity\PRJ Compiler restore\MASTER contains one of each project that is most up to date
G:\CurrentActivity\PRJ Compiler restore\Merging XXXX contains multiple XXXX's that are potentially different from each other that need comparing and merging into MASTER.

So let's make a list of what's left to do:

Merging z80asm
{
1,2,3 three different versions! And it's not clear which is latest.
Try MASTER vs 1: lots of differences
2: ditto
3: ditto
4: only one file but still lots of differences

Try 1 with 2: LOD; 3,4 LOD
5: identical, can delete
6: identical, can delete

Try 2 with 3,4: LOD

Try 3 with 4: LOD

Give up, rewrite as new
Start with G:\CurrentActivity\PRJ Compiler restore\Merging z80asm\0
then see what we can grab from 1,2,3,4, deleting as we go.
}}

T002 Start VS2019 solution
--------------------------
{{
Location: G:\CurrentActivity\PRJ Compiler Rewrite
Solution: Compiler.sln
All previous individual projects to be recreated as Projects within this Solution.

Starting z80asm

Might be nice to have a play area too; created Junk(console app) and JunkLib

G:\Dev\Test created as a handy location for test files - shove these into Git as well?
- yes, at some point: G:\CurrentActivity\PRJ Compiler Rewrite\Compiler\TestFiles\<project>

So what do we have in each directory in G:\CurrentActivity\PRJ Compiler restore\Merging z80asm ?
0: assline.cpp, labels.cpp, "Test files" dir with 21 .asm files, DS_writeup.txt containing
{
Still to implement:
- using assline2 to compile source to executable
- compile source to linkable object file
- Error reporting will probably need upgrading to display the line number, otherwise
the programmer won't be able to find the code.
}
1: everything in z80asm.cpp, Debug contains 14 .asm files and other types (z80, emu, as0)
2: as 0 but 20 .asm files and a load of other stuff
3: everything in z80asm.txt, Debug contains 7 .asm files etc
4: only z80asm.cpp

PRJ Compiler restore\Merging z80asm
contents zipped
so as I process each directory while rewriting, I can delete stuff --> when file sizes get to zero, they can be deleted.
Doesn't matter about not compiling; if I need to I can unzip.

Starting wip PRJ Compiler restore\Merging z80asm\0

Assembler output is going to be a series of blocks:
start address { 
  byte, byte, XX, ...,
  byte, XX, ...,
} and label references. Commas at end of last line should be OK. Or no comma at the end of the line. Intermediate storage will just be a vector<string>.
The assembler will resolve as many labels as it can.
(In fact the line assembler should be able to resolve some references, namely the ones that jump back.)
The linker will resolve all the remaining XX's and labels
If file1.asm contains blocks for 0 {} and $1000 {}, but contains a jump to an unknown label which might resolve to $2xxx defined in file2.asm,
file1.o will need XX's indicating where the jump command is and what the label name is.
There could be several jumps/calls to the label.

We don't need actual XX's. 00's would do too if we want to use __int8 - but do we? We need to make sure we know where all the places are than need resolving.
But we need something that sticks out as obvious if we miss it.  FF might be the choice.
However if we are actually storing it as a list of 2-char hex numbers we could use XX as being even more obvious, and any conversion to hex will fail. So let's do that.

Assembler object takes istream and ostream, so it's testable with stringstreams and implementable with fstreams
}}


T003 Get z80asm to the point where it can generate some simple files       <--- WIP
====================================================================
{{
First program will be to toggle an LED when a button is pressed.
Hardware will emulate
(a) a button at E000h, which will read from the GUI and hold the "button has been pressed" (1) state until it's read, at which time it will auto-reset to zero
(b) an LED at E001h, where 0=off, 1=on

Program firstLED.asm:

ORG 0
btn equ $e000
led equ $e001

read:
ld a,(btn)
jp z,read

; button has been pressed
ld a,(led)
xor 1
ld (led),a
jmp read

Lookup table:
org - address
label - equ - value

OK, drawing together several ideas:
- you should use a lookup table
- don't use an if/else if ladder
- polymorphism can replace switch blocks

we could have a lookup table containing:
regex to match - a processing object which implements a common interface IAssemble
Translate function then scans the table for the first regex that matches, then invokes the object's Process then GetBytes functions
What about regex -> lambda?

DFA then!!!
iXXXX=intermediate symbol
fXXXX=terminal symbol (for keywords this will be confirmed with a space)
s=symbol

Input--> |l    |d    |< >  |j    |m    |p    |x    |o    |r    |g    |     |     |     |     |     |     |     |     |     |     |     |     |     
State----------------------------------------------------------------------------------------------------------------------------------------------
0        |iL   |  s  |     |iJ   |     |     |iX   |iO   |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iL       |     |iLD  |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iLD      |     |     |fLD  |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iJ       |     |     |     |     |iJM  |iJP  |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iJM      |     |     |     |     |     |iJMP |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iJMP     |     |     |fJMP |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iJP      |     |     |fJP  |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iX       |     |     |     |     |     |     |     |iXO  |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iXO      |     |     |     |     |     |     |     |     |iXOR |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iXOR     |     |     |fXOR |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iO       |     |     |     |     |     |     |     |     |iOR  |     |     |     |     |     |     |     |     |     |     |     |     |     |     
iOR      |     |     |fOR  |     |     |     |     |     |     |iORG |     |     |     |     |     |     |     |     |     |     |     |     |     
iORG     |     |     |fORG |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     

no this is silly.
More reading... Seems compilers take a series of regex's then convert them into a large NFA. The implication is that this is done automatically.
So effectively we end up with a table like above.
- except we now discover this: https://courses.engr.illinois.edu/cs421/su2009/lectures/05-lexical-analysis.pdf
where it says on p22 the above table is the bad way, vs the good way which is to collect a bunch of [a-z]'s together then check if the whole thing matches a known keyword.
but looking at it again p10 contradicts that, or seems to.
That's the problem with only having the slides.

What I'll do then is subject each input line to one or more regex's finding hopefully just one match.
So a lookup table of regex->lambda would seem to be the way ahead.
If this turns out to be too slow then we can look at some kind of optimisation, maybe a DFA (which is essentially what the old version was).

Partial build; output is:

Assemble file [G:\Dev\Test\firstLED.asm], output into [G:\Dev\Test\firstLED.z8o]

Translate line from file: [ORG 0]
Class AsmOrginvoked for matching strings: [org 0] [0]

Translate line from file: [btn equ $e000]
Class AsmEquinvoked for matching strings: [btn equ $e000] [btn] [$e000]

Translate line from file: [led equ $e001]
Class AsmEquinvoked for matching strings: [led equ $e001] [led] [$e001]

Translate line from file: []
Ignore blank line

Translate line from file: [read:]
SymbolManager adding label [read] with value [0]
Ignore blank line

Translate line from file: [ld a,(btn)]
Got no matches! [ld a,(btn)]

Translate line from file: [jp z,read]
Got no matches! [jp z,read]

Translate line from file: []
Ignore blank line

Translate line from file: [; button has been pressed]
Ignore blank line

Translate line from file: [ld a,(led)]
Got no matches! [ld a,(led)]

Translate line from file: [xor 1]
Got no matches! [xor 1]

Translate line from file: [ld (led),a]
Got no matches! [ld (led),a]

Translate line from file: [jmp read]
Got no matches! [jmp read]
Finished processing input file. Symbol table:
read=0

TODO from this:

Translate line from file: [ORG 0]
Class AsmOrginvoked for matching strings: [org 0] [0]

Translate line from file: [btn equ $e000]
Class AsmEquinvoked for matching strings: [btn equ $e000] [btn] [$e000]

Translate line from file: [led equ $e001]
Class AsmEquinvoked for matching strings: [led equ $e001] [led] [$e001]

Translate line from file: [read:]
SymbolManager adding label [read] with value [0]
Ignore blank line

Translate line from file: [ld a,(btn)]
Got no matches! [ld a,(btn)]

Translate line from file: [jp z,read]
Got no matches! [jp z,read]

Translate line from file: [ld a,(led)]
Got no matches! [ld a,(led)]

Translate line from file: [xor 1]
Got no matches! [xor 1]

Translate line from file: [ld (led),a]
Got no matches! [ld (led),a]

Translate line from file: [jmp read]
Got no matches! [jmp read]
Finished processing input file. Symbol table:
read=0


then of course linker, emulator
Also split the z80asm.cpp out into a bunch of files
}}


T004 z80link to convert just one .z8o into .z8x, no symbol table, no memory mapped IO (emu will start with some preconfigured hardware which can then later be customised)
==========================================================================================================================================================================
{{
}}


T005 z80emu to run the output
=============================
{{
maybe this will be to flash an LED. Thought: how about an "escape" sequence which prompts the emulator to do some stuff
instead of directly executing instructions? Might be one way to implement "wait for timer" without a 100% CPU tight loop.
- or maybe that's what "halt" is for. Yes, it causes the CPU to wait for the next interrupt, although the detail on what
exactly that means is somewhat missing.
}}



z003 Bug list
=============
B000 z80emu assignment in if
{
in z80Emu::op_alu
case ALU_NEG: // neg
...
  if (regA=0x80)  <-- assignment not compare
}
B001 unsigned short might not be 16-bit any more


z004 Reference material
=======================
C++ Casting

static_cast is the main one.
reinterpret_cast changes the type altogether, e.g. int to std::string*. 
const_cast for adding or removing const or volatile.
dynamic_cast casts pointers up and down am inheritance hierarchy, returns nullptr if there's a problem.
~
Header shenanigans

// System headers - switch warnings to L3
#pragma warning(push,3)
#pragma warning(disable:4365)
...
// Warnings back on for my stuff
#pragma warning(pop)

Tried to disable Spectre warnings with #pragma warning(disable:5045)
but this had no effect.

Instead of looping over argv as in traditional C code, converting the command line args into a vector solved it
std::vector<std::string> args(argv, argv + argc);
~
~
~
~
~
